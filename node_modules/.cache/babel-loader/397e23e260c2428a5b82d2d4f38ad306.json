{"ast":null,"code":"export function isRoleAccountExecutive(kategori) {\n  let flag = false;\n\n  if (kategori === 'account_executive') {\n    flag = true;\n  }\n\n  return flag;\n}\nexport function constructAgent(dataState, post) {\n  let dataAgent = {\n    name: dataState.agentName,\n    email: dataState.email,\n    phone: `62${dataState.phone}`,\n    banks: isRoleAccountExecutive(dataState.kategori) ? [parseInt(dataState.bank[0] && dataState.bank[0].id || dataState.instansi)] : redefineBank(dataState.bank, dataState.listBank),\n    status: dataState.status ? 'active' : 'inactive'\n  };\n\n  if (post) {\n    dataAgent.username = dataState.username;\n    dataAgent.category = dataState.kategori;\n\n    if (!isRoleAccountExecutive(dataState.kategori)) {\n      dataAgent.agent_provider = parseInt(dataState.instansi);\n    }\n  }\n\n  return dataAgent;\n}\nexport function redefineBank(dataBank) {\n  let arrBank = [];\n\n  for (const key in dataBank) {\n    arrBank.push(parseInt(dataBank[key].id && dataBank[key].id || dataBank[key]));\n  }\n\n  return arrBank;\n}\nexport function destructAgent(dataAgent, list, dataBank) {\n  const dataListAgent = list ? dataAgent : [dataAgent];\n\n  for (const key in dataListAgent) {\n    dataListAgent[key].status = dataListAgent[key].status && dataListAgent[key].status.toString().toLowerCase() === 'active' ? list ? 'Aktif' : true : list ? 'Tidak Aktif' : false;\n    dataListAgent[key].category_name = isRoleAccountExecutive(dataListAgent[key].category) ? 'Account Executive' : 'Agen';\n    dataListAgent[key].agent_provider = isRoleAccountExecutive(dataListAgent[key].category) ? dataListAgent[key].banks && dataListAgent[key].banks[0] || 0 : dataListAgent[key].agent_provider && dataListAgent[key].agent_provider.Int64;\n    dataListAgent[key].instansi = isRoleAccountExecutive(dataListAgent[key].category) ? findBanksName(dataListAgent[key].bank_names) : dataListAgent[key].agent_provider_name;\n    dataListAgent[key].banks_name = findBanksName(dataListAgent[key].bank_names);\n    dataListAgent[key].banks = dataBank ? findBanks(dataListAgent[key].banks, dataBank) : dataListAgent[key].banks;\n  }\n\n  return list ? dataListAgent : dataListAgent[0];\n}\nexport function findBanksName(listBank) {\n  let bankName = '';\n\n  for (const key in listBank) {\n    if (bankName.trim().length !== 0) {\n      bankName += ', ';\n    }\n\n    bankName += listBank[key];\n  }\n\n  return bankName;\n}\nexport function findBanks(banks, dataListBank) {\n  let bankNew = [];\n\n  for (const keyBank in banks) {\n    for (const key in dataListBank) {\n      if (dataListBank[key].id && dataListBank[key].id.toString().toLowerCase() === banks[keyBank].toString().toLowerCase()) {\n        bankNew.push(dataListBank[key]);\n        break;\n      }\n    }\n  }\n\n  return bankNew;\n}","map":{"version":3,"sources":["C:/Users/pc/Desktop/asira_core/src/components/agent/function.js"],"names":["isRoleAccountExecutive","kategori","flag","constructAgent","dataState","post","dataAgent","name","agentName","email","phone","banks","parseInt","bank","id","instansi","redefineBank","listBank","status","username","category","agent_provider","dataBank","arrBank","key","push","destructAgent","list","dataListAgent","toString","toLowerCase","category_name","Int64","findBanksName","bank_names","agent_provider_name","banks_name","findBanks","bankName","trim","length","dataListBank","bankNew","keyBank"],"mappings":"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","sourcesContent":["export function isRoleAccountExecutive (kategori) {\r\n  let flag = false;\r\n\r\n  if(kategori === 'account_executive') {\r\n    flag = true;\r\n  }\r\n\r\n  return flag;\r\n}\r\n\r\nexport function constructAgent (dataState, post) {\r\n  let dataAgent = {\r\n    name: dataState.agentName,\r\n    email: dataState.email,\r\n    phone: `62${dataState.phone}`,\r\n    banks: isRoleAccountExecutive(dataState.kategori) ? [parseInt((dataState.bank[0] && dataState.bank[0].id) || dataState.instansi)] : redefineBank(dataState.bank, dataState.listBank),\r\n    status: dataState.status ? 'active' : 'inactive',\r\n  }\r\n\r\n  if(post) {\r\n    dataAgent.username = dataState.username;\r\n    dataAgent.category = dataState.kategori;\r\n    if(!isRoleAccountExecutive(dataState.kategori)) {\r\n      dataAgent.agent_provider = parseInt(dataState.instansi)\r\n    }\r\n  }\r\n\r\n  return dataAgent\r\n}\r\n\r\nexport function redefineBank(dataBank) {\r\n  let arrBank = [];\r\n\r\n  for(const key in dataBank) {\r\n    arrBank.push(parseInt((dataBank[key].id && dataBank[key].id) || dataBank[key]))\r\n  }\r\n\r\n  return arrBank;\r\n}\r\n\r\nexport function destructAgent (dataAgent, list, dataBank) {\r\n  const dataListAgent = list ? dataAgent : [dataAgent];\r\n\r\n  for(const key in dataListAgent) {\r\n    dataListAgent[key].status = dataListAgent[key].status && dataListAgent[key].status.toString().toLowerCase() === 'active' ? (list ? 'Aktif' : true) : (list ? 'Tidak Aktif' : false)\r\n    dataListAgent[key].category_name = isRoleAccountExecutive(dataListAgent[key].category) ? 'Account Executive' : 'Agen'\r\n    dataListAgent[key].agent_provider = isRoleAccountExecutive(dataListAgent[key].category) ? ((dataListAgent[key].banks && dataListAgent[key].banks[0]) || 0) : (dataListAgent[key].agent_provider && dataListAgent[key].agent_provider.Int64)\r\n    dataListAgent[key].instansi = isRoleAccountExecutive(dataListAgent[key].category) ? findBanksName(dataListAgent[key].bank_names) : dataListAgent[key].agent_provider_name ;\r\n    dataListAgent[key].banks_name = findBanksName(dataListAgent[key].bank_names);\r\n    dataListAgent[key].banks = dataBank ? findBanks(dataListAgent[key].banks, dataBank) : dataListAgent[key].banks;\r\n  }\r\n  \r\n  return list ? dataListAgent : dataListAgent[0];\r\n}\r\n\r\nexport function findBanksName(listBank) {\r\n  let bankName = '';\r\n\r\n  for(const key in listBank) {\r\n    if(bankName.trim().length !== 0) {\r\n      bankName += ', ';\r\n    }\r\n    bankName += listBank[key]\r\n  }\r\n\r\n  return bankName;\r\n}\r\n\r\nexport function findBanks(banks, dataListBank) {\r\n  let bankNew = [];\r\n\r\n  for(const keyBank in banks) {\r\n    for(const key in dataListBank) {\r\n      if(dataListBank[key].id && dataListBank[key].id.toString().toLowerCase() === banks[keyBank].toString().toLowerCase()){\r\n        bankNew.push(dataListBank[key]);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  return bankNew;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}