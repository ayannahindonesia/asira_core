{"ast":null,"code":"import { listAllRolePermission } from \"../global/globalConstant\";\nimport { destructErrorMessage } from \"../global/globalFunction\";\nexport function destructRolePermission(permission) {\n  try {\n    let lastPermission = [];\n    let id = '';\n\n    for (const key in permission) {\n      if (!permission[key].toString().toLowerCase().includes('detail')) {\n        id = permission[key];\n      }\n\n      lastPermission.push({\n        id,\n        modules: permission[key]\n      });\n    }\n\n    return lastPermission;\n  } catch (err) {\n    const error = err.response && err.response.data && destructErrorMessage(err.response.data) || err.toString();\n    return {\n      error\n    };\n  }\n}\n;\nexport function constructRolePermission(rolePermission) {\n  try {\n    let newPermission = [];\n\n    for (const key in rolePermission) {\n      if (rolePermission[key].modules === 'all') {\n        newPermission = ['all'];\n        break;\n      }\n\n      newPermission.push(rolePermission[key].modules);\n    }\n\n    return newPermission;\n  } catch (err) {\n    const error = err.response && err.response.data && destructErrorMessage(err.response.data) || err.toString();\n    return {\n      error\n    };\n  }\n}\n;\nexport function checkingSystem(role, listRole) {\n  let listPermission = listAllRolePermission;\n  let newListAllRolePermission = [];\n\n  for (const keyRole in listRole) {\n    if (listRole[keyRole].id && listRole[keyRole].id.toString().toLowerCase() === role.toString().toLowerCase()) {\n      for (const key in listPermission) {\n        if (listPermission[key].menu.split('(')[1].toLowerCase().includes(listRole[keyRole].system.toString().toLowerCase())) {\n          newListAllRolePermission.push(listPermission[key]);\n        }\n      }\n\n      break;\n    }\n  }\n\n  return newListAllRolePermission;\n}\n;\nexport function checkingRole(role, id) {\n  for (const key in role) {\n    if (role[key].id.toString().trim() === id.toString().trim()) {\n      return true;\n    }\n  }\n\n  return false;\n}\nexport function findRoleName(idRole, dataRole) {\n  let roleName = '';\n\n  for (const key in dataRole) {\n    if (idRole.toString().toLowerCase() === dataRole[key].id.toString().toLowerCase()) {\n      roleName = dataRole[key].name;\n      break;\n    }\n  }\n\n  return roleName;\n}\nexport function findSystem(idRole, dataRole) {\n  let system = '';\n\n  for (const key in dataRole) {\n    if (idRole.toString().toLowerCase() === dataRole[key].id.toString().toLowerCase()) {\n      system = dataRole[key].system;\n      break;\n    }\n  }\n\n  return system;\n}","map":{"version":3,"sources":["C:/Users/pc/Desktop/asira_core/src/components/rolePermission/function.js"],"names":["listAllRolePermission","destructErrorMessage","destructRolePermission","permission","lastPermission","id","key","toString","toLowerCase","includes","push","modules","err","error","response","data","constructRolePermission","rolePermission","newPermission","checkingSystem","role","listRole","listPermission","newListAllRolePermission","keyRole","menu","split","system","checkingRole","trim","findRoleName","idRole","dataRole","roleName","name","findSystem"],"mappings":"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","sourcesContent":["import { listAllRolePermission } from \"../global/globalConstant\";\r\nimport { destructErrorMessage } from \"../global/globalFunction\";\r\n\r\nexport function destructRolePermission(permission){\r\n\r\n    try {\r\n        let lastPermission = [] ;\r\n        let id = '';\r\n\r\n        for(const key in permission) {\r\n            \r\n            if(!permission[key].toString().toLowerCase().includes('detail')) {\r\n                id = permission[key]\r\n            }\r\n            \r\n            lastPermission.push({\r\n                id,\r\n                modules: permission[key],\r\n            })\r\n        }\r\n\r\n        return(lastPermission)\r\n    } catch (err) {\r\n        const error = (err.response && err.response.data && destructErrorMessage(err.response.data)) || err.toString();\r\n        return({error});\r\n    }\r\n\r\n};\r\n\r\nexport function constructRolePermission(rolePermission) {\r\n\r\n    try {\r\n        let newPermission = [];\r\n\r\n        for(const key in rolePermission) {\r\n            if(rolePermission[key].modules === 'all') {\r\n                newPermission = ['all'];\r\n                break;\r\n            }\r\n            newPermission.push(rolePermission[key].modules)\r\n        }\r\n        return newPermission;\r\n    } catch (err) {\r\n        const error = (err.response && err.response.data && destructErrorMessage(err.response.data)) || err.toString();\r\n        return({error});\r\n    }\r\n    \r\n};\r\n\r\nexport function checkingSystem (role, listRole){\r\n    let listPermission = listAllRolePermission;\r\n\r\n    let newListAllRolePermission = [];\r\n    \r\n    for(const keyRole in listRole) {\r\n      if(listRole[keyRole].id && listRole[keyRole].id.toString().toLowerCase() === role.toString().toLowerCase()) {\r\n        for(const key in listPermission) {\r\n          if(listPermission[key].menu.split('(')[1].toLowerCase().includes(listRole[keyRole].system.toString().toLowerCase())) {\r\n            newListAllRolePermission.push(listPermission[key])\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    return newListAllRolePermission;\r\n};\r\n\r\nexport function checkingRole (role, id){\r\n    for (const key in role) {\r\n      if (\r\n        role[key].id.toString().trim() === id.toString().trim()\r\n      ) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function findRoleName (idRole, dataRole) {\r\n  let roleName = '';\r\n\r\n  for(const key in dataRole) {\r\n    if(idRole.toString().toLowerCase() === dataRole[key].id.toString().toLowerCase()) {\r\n      roleName = dataRole[key].name\r\n      break;\r\n    }\r\n  }\r\n\r\n  return roleName;\r\n}\r\n\r\nexport function findSystem (idRole, dataRole) {\r\n  let system = '';\r\n\r\n  for(const key in dataRole) {\r\n    if(idRole.toString().toLowerCase() === dataRole[key].id.toString().toLowerCase()) {\r\n      system = dataRole[key].system\r\n      break;\r\n    }\r\n  }\r\n\r\n  return system;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}