{"ast":null,"code":"import axios from 'axios';\nimport { serverUrl } from '../url';\nimport { getToken } from '../index/token';\nimport { destructErrorMessage } from '../global/globalFunction';\nexport async function AddTipeBankFunction(param) {\n  return new Promise(async resolve => {\n    const config = {\n      headers: {\n        'Authorization': \"Bearer \" + getToken()\n      }\n    };\n    axios.post(serverUrl + `admin/bank_types`, param, config).then(res => {\n      resolve(res);\n    }).catch(err => {\n      const error = err.response && err.response.data && destructErrorMessage(err.response.data) || err.toString();\n      param.error = error;\n      resolve(param);\n    });\n  });\n}\nexport async function ListTipeBankFunction(param, next) {\n  return new Promise(async resolve => {\n    const config = {\n      headers: {\n        'Authorization': \"Bearer \" + getToken()\n      }\n    };\n    let filter = '';\n\n    for (const key in param) {\n      filter += `&${key}=${param[key]}`;\n    }\n\n    axios.get(serverUrl + `admin/bank_types?orderby=updated_at&sort=desc${filter}`, config).then(res => {\n      param.listBankType = res.data;\n\n      if (next) {\n        resolve(next(param));\n      } else {\n        resolve(param);\n      }\n    }).catch(err => {\n      const error = err.response && err.response.data && destructErrorMessage(err.response.data) || err.toString();\n      param.error = error;\n      resolve(param);\n    });\n  });\n}\nexport async function DetailTipeBankFunction(params, next) {\n  return new Promise(async resolve => {\n    const config = {\n      headers: {\n        'Authorization': \"Bearer \" + getToken()\n      }\n    };\n    axios.get(serverUrl + `admin/bank_types/${params.id}`, config).then(res => {\n      if (next) {\n        resolve(next(params));\n      } else {\n        resolve(res.data);\n      }\n    }).catch(err => {\n      const error = err.response && err.response.data && destructErrorMessage(err.response.data) || err.toString();\n      params.error = error;\n      resolve(params);\n    });\n  });\n}\nexport async function EditTipeBankFunction(params) {\n  return new Promise(async resolve => {\n    const config = {\n      headers: {\n        'Authorization': \"Bearer \" + getToken()\n      }\n    };\n    axios.patch(serverUrl + `admin/bank_types/${params.id}`, params.newData, config).then(res => {\n      resolve(res);\n    }).catch(err => {\n      const error = err.response && err.response.data && destructErrorMessage(err.response.data) || err.toString();\n      params.error = error;\n      resolve(params);\n    });\n  });\n}","map":{"version":3,"sources":["C:/Users/pc/Desktop/asira_core/src/components/tipeMitra/saga.js"],"names":["axios","serverUrl","getToken","destructErrorMessage","AddTipeBankFunction","param","Promise","resolve","config","headers","post","then","res","catch","err","error","response","data","toString","ListTipeBankFunction","next","filter","key","get","listBankType","DetailTipeBankFunction","params","id","EditTipeBankFunction","patch","newData"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport { serverUrl } from '../url';\r\nimport { getToken } from '../index/token';\r\nimport { destructErrorMessage } from '../global/globalFunction';\r\n\r\nexport async function AddTipeBankFunction (param){\r\n    return new Promise (async (resolve)=>{\r\n        const config = {\r\n            headers: {'Authorization': \"Bearer \" + getToken()}\r\n        };\r\n        axios.post(serverUrl+`admin/bank_types`,param,config)\r\n        .then((res)=>{\r\n            resolve(res)\r\n        })\r\n        .catch((err)=>{\r\n            const error = (err.response && err.response.data && destructErrorMessage(err.response.data))|| err.toString()\r\n            param.error = error;\r\n            resolve(param);\r\n        })\r\n    })\r\n}\r\n\r\nexport async function ListTipeBankFunction (param,next){\r\n    return new Promise(async (resolve)=>{\r\n        const config = {\r\n            headers: {'Authorization': \"Bearer \" + getToken()}\r\n          };\r\n          let filter = '';\r\n\r\n          for(const key in param) {\r\n              filter += `&${key}=${param[key]}`\r\n          }\r\n        axios.get(serverUrl+`admin/bank_types?orderby=updated_at&sort=desc${filter}`,config)\r\n        .then((res)=>{\r\n            param.listBankType = res.data\r\n            if(next){\r\n                resolve(next(param))\r\n            }else{\r\n                resolve(param)\r\n            }\r\n            \r\n        })\r\n        .catch((err)=>{\r\n            const error = (err.response && err.response.data && destructErrorMessage(err.response.data))|| err.toString()\r\n            param.error = error;\r\n            resolve(param);\r\n        })\r\n    })\r\n}\r\n\r\nexport async function DetailTipeBankFunction(params,next) {\r\n    return new Promise(async(resolve)=>{\r\n        \r\n            const config = {\r\n                headers: {'Authorization': \"Bearer \" + getToken()}\r\n              };\r\n          \r\n            axios.get(serverUrl+`admin/bank_types/${params.id}`,config)\r\n            .then((res)=>{\r\n                if(next){\r\n                    resolve(next(params))\r\n                }else{\r\n                    resolve(res.data)\r\n                }\r\n            })\r\n            .catch((err)=>{\r\n                const error = (err.response && err.response.data && destructErrorMessage(err.response.data))|| err.toString()\r\n                params.error = error;\r\n                resolve(params);\r\n            })\r\n        \r\n    })    \r\n}\r\n\r\nexport async function EditTipeBankFunction(params) {\r\n    return new Promise(async(resolve)=>{\r\n        const config = {\r\n            headers: {'Authorization': \"Bearer \" + getToken()}\r\n        };\r\n        axios.patch(serverUrl+`admin/bank_types/${params.id}`,params.newData,config)\r\n        .then((res)=>{\r\n            resolve(res)\r\n        })\r\n        .catch((err)=>{\r\n            const error = (err.response && err.response.data && destructErrorMessage(err.response.data))|| err.toString()\r\n            params.error = error;\r\n            resolve(params);\r\n        })\r\n    })\r\n}"]},"metadata":{},"sourceType":"module"}