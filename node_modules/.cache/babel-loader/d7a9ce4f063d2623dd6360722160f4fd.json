{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pc\\\\Desktop\\\\asira_core\\\\src\\\\components\\\\subComponent\\\\DropDown.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/styles';\nimport NativeSelect from '@material-ui/core/NativeSelect';\nimport Select from '@material-ui/core/Select';\nimport Chip from '@material-ui/core/Chip';\nimport Input from '@material-ui/core/Input';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250\n    }\n  }\n};\n\nconst styles = theme => ({\n  selectField: {\n    minWidth: 120,\n    display: 'flex',\n    flexWrap: 'wrap',\n    marginTop: '1em'\n  },\n  formControl: {\n    minWidth: 120,\n    display: 'flex',\n    flexWrap: 'wrap',\n    marginTop: '1em'\n  },\n  chips: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    marginRight: '10px'\n  }\n});\n\nclass DropDown extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getColor = (id, dataValue) => {\n      let flag = false;\n\n      for (const key in dataValue) {\n        if (dataValue[key][this.props.id].toString().toLowerCase() === id.toString().toLowerCase()) {\n          flag = true;\n          break;\n        }\n      }\n\n      return flag ? '#d3d3d3' : 'white';\n    };\n\n    this.state = {\n      errorText: ''\n    };\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (nextProps.error !== this.props.error) {\n      this.setState({\n        error: nextProps.error\n      });\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          classes = _this$props.classes,\n          fullWidth = _this$props.fullWidth,\n          label = _this$props.label,\n          data = _this$props.data,\n          id = _this$props.id,\n          labelName = _this$props.labelName,\n          value = _this$props.value,\n          onChange = _this$props.onChange,\n          disabled = _this$props.disabled,\n          multiple = _this$props.multiple;\n\n    if (multiple) {\n      return React.createElement(FormControl, {\n        className: classes.formControl,\n        error: !!this.state.error,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(Select, {\n        style: {\n          border: '1px solid #ced4da',\n          paddingLeft: '5px'\n        },\n        multiple: true,\n        fullWidth: true,\n        value: value,\n        onChange: onChange,\n        input: React.createElement(Input, {\n          id: \"select-multiple-chip\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }),\n        renderValue: value => React.createElement(\"div\", {\n          className: classes.chips,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        }, value.map(dataChip => React.createElement(Chip, {\n          key: dataChip[id],\n          label: dataChip[labelName],\n          className: classes.chip,\n          style: {\n            marginRight: '10px',\n            marginBottom: '5px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }))),\n        MenuProps: MenuProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, data.map(data => React.createElement(MenuItem, {\n        key: data[id],\n        value: data[id],\n        style: {\n          backgroundColor: this.getColor(data[id], value)\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, data[labelName]))), this.state.error && React.createElement(FormHelperText, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, this.state.error));\n    } else {\n      return React.createElement(FormControl, {\n        className: classes.selectField,\n        error: !!this.state.error,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(NativeSelect, {\n        value: value,\n        onChange: onChange,\n        fullWidth: fullWidth,\n        style: {\n          border: '1px solid #ced4da',\n          paddingLeft: '5px'\n        },\n        inputProps: {\n          name: label,\n          id: label\n        },\n        disabled: disabled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, data && Object.keys(data).length && data.map(object => {\n        const idObject = object[id];\n        const labelNames = labelName.split('-');\n        let labelObject = '';\n\n        if (labelNames.length > 1) {\n          for (let i = 0; i < labelNames.length; i++) {\n            labelObject = `${labelObject} - ${object[labelNames[i]]}`;\n          }\n\n          labelObject = labelObject.substr(3);\n        } else {\n          labelObject = object[labelNames];\n        }\n\n        return React.createElement(\"option\", {\n          value: idObject,\n          key: idObject,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154\n          },\n          __self: this\n        }, labelObject);\n      })), this.state.error && React.createElement(FormHelperText, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, this.state.error));\n    }\n  }\n\n}\n\nDropDown.propTypes = {\n  fullWidth: PropTypes.bool,\n  label: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  labelName: PropTypes.string.isRequired,\n  onChange: PropTypes.func,\n  disabled: PropTypes.bool,\n  error: PropTypes.string\n};\nexport default withStyles(styles)(DropDown);","map":{"version":3,"sources":["C:/Users/pc/Desktop/asira_core/src/components/subComponent/DropDown.js"],"names":["React","PropTypes","withStyles","NativeSelect","Select","Chip","Input","MenuItem","FormControl","FormHelperText","ITEM_HEIGHT","ITEM_PADDING_TOP","MenuProps","PaperProps","style","maxHeight","width","styles","theme","selectField","minWidth","display","flexWrap","marginTop","formControl","chips","marginRight","DropDown","Component","constructor","props","getColor","id","dataValue","flag","key","toString","toLowerCase","state","errorText","UNSAFE_componentWillReceiveProps","nextProps","error","setState","render","classes","fullWidth","label","data","labelName","value","onChange","disabled","multiple","border","paddingLeft","map","dataChip","chip","marginBottom","backgroundColor","name","Object","keys","length","object","idObject","labelNames","split","labelObject","i","substr","propTypes","bool","string","isRequired","func"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport Select from '@material-ui/core/Select';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Input from '@material-ui/core/Input';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\n\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n      width: 250,\r\n    },\r\n  },\r\n};\r\n\r\nconst styles = (theme) => ({\r\n  selectField: {\r\n    minWidth: 120,\r\n    display: 'flex',\r\n    flexWrap: 'wrap', \r\n    marginTop: '1em',\r\n  },\r\n\r\n  formControl: {\r\n    minWidth: 120,\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    marginTop: '1em',\r\n  },\r\n  chips: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    marginRight: '10px',\r\n  },\r\n});\r\n\r\nclass DropDown extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      errorText: '',\r\n    };\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    if (nextProps.error !== this.props.error) {\r\n      this.setState({\r\n        error: nextProps.error,\r\n      });\r\n    }\r\n  }\r\n\r\n  getColor = (id, dataValue) => {\r\n    let flag = false;\r\n\r\n    for(const key in dataValue) {\r\n      if(dataValue[key][this.props.id].toString().toLowerCase() === id.toString().toLowerCase() ) {\r\n        flag = true;\r\n        break;\r\n      }\r\n    }\r\n    \r\n    return flag ? '#d3d3d3' : 'white';\r\n  }\r\n\r\n\r\n  render() {\r\n    const {\r\n      classes,\r\n      fullWidth,\r\n      label,\r\n      data,\r\n      id,\r\n      labelName,\r\n      value,\r\n      onChange,\r\n      disabled,\r\n      multiple,\r\n    } = this.props;\r\n    \r\n    if(multiple) {\r\n      return (\r\n        <FormControl className={classes.formControl} error={!!this.state.error}>\r\n          <Select\r\n            style={{border: '1px solid #ced4da', paddingLeft:'5px'}}\r\n            multiple\r\n            fullWidth\r\n            value={value}\r\n            onChange={onChange}\r\n            input={<Input id=\"select-multiple-chip\" />}\r\n            renderValue={value => (\r\n              <div className={classes.chips}>\r\n                {value.map(dataChip => (\r\n                  <Chip \r\n                    key={dataChip[id]} \r\n                    label={dataChip[labelName]} \r\n                    className={classes.chip} \r\n                    style={{marginRight: '10px', marginBottom: '5px'}}\r\n                  />\r\n                ))}\r\n              </div>\r\n            )}\r\n            MenuProps={MenuProps}\r\n          >\r\n            {data.map(data => (\r\n              <MenuItem key={data[id]} value={data[id]} style={{backgroundColor: this.getColor(data[id], value)}}>\r\n                {data[labelName]}\r\n              </MenuItem>\r\n            ))}\r\n          </Select>\r\n          {this.state.error && (\r\n            <FormHelperText>{this.state.error}</FormHelperText>\r\n          )}\r\n        </FormControl>\r\n      ); \r\n    } else {\r\n      return (\r\n        <FormControl className={classes.selectField} error={!!this.state.error}>\r\n          <NativeSelect\r\n            value={value}\r\n            onChange={onChange}\r\n            fullWidth={fullWidth}\r\n            style={{border: '1px solid #ced4da', paddingLeft:'5px'}}\r\n            inputProps={{\r\n              name: label,\r\n              id: label,\r\n            }}\r\n            disabled={disabled}\r\n          >\r\n            {data &&\r\n              Object.keys(data).length &&\r\n              data.map((object) => {\r\n                const idObject = object[id];\r\n                const labelNames = labelName.split('-');\r\n                let labelObject = '';\r\n                if (labelNames.length > 1) {\r\n                  for (let i = 0; i < labelNames.length; i++) {\r\n                    labelObject = `${labelObject } - ${ object[labelNames[i]]}`;\r\n                  }\r\n                  labelObject = labelObject.substr(3);\r\n                } else {\r\n                  labelObject = object[labelNames];\r\n                }\r\n  \r\n                return (\r\n                  <option value={idObject} key={idObject}>\r\n                    {labelObject}\r\n                  </option>\r\n                );\r\n              })} \r\n          </NativeSelect>\r\n          {this.state.error && (\r\n            <FormHelperText>{this.state.error}</FormHelperText>\r\n          )}\r\n        </FormControl>\r\n      );\r\n    }\r\n    \r\n    \r\n  }\r\n}\r\n\r\nDropDown.propTypes = {\r\n  fullWidth: PropTypes.bool,\r\n  label: PropTypes.string.isRequired,\r\n  id: PropTypes.string.isRequired,\r\n  labelName: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func,\r\n  disabled: PropTypes.bool,\r\n  error: PropTypes.string,\r\n};\r\n\r\nexport default withStyles(styles)(DropDown);\r\n"]},"metadata":{},"sourceType":"module"}