{"ast":null,"code":"import SecureLS from 'secure-ls';\nimport md5 from 'md5';\nconst newLs = new SecureLS({\n  encodingType: 'aes',\n  isCompression: true,\n  encryptionSecret: 'react-secret'\n});\nexport function setTokenAuth(token) {\n  newLs.set(md5('tokenAuth'), token);\n}\nexport function setToken(token, expires) {\n  newLs.set(md5('token'), token);\n  newLs.set(md5('tokenTime'), expires);\n}\nexport function setTokenGeo(tokenGeo) {\n  newLs.set(md5('tokenGeo'), tokenGeo);\n}\nexport function setProfileUser(profileUser) {\n  newLs.set(md5('profileUser'), profileUser);\n}\nexport function getTokenAuth() {\n  return newLs.get(md5('tokenAuth'));\n}\nexport function getToken() {\n  const newDateToken = new Date().getTime();\n  const timeExpires = newLs.get(md5('tokenTime')) ? parseInt(newLs.get(md5('tokenTime'))) : new Date().getTime();\n\n  if (newDateToken > timeExpires) {\n    localStorage.clear();\n    return null;\n  }\n\n  return newLs.get(md5('token'));\n}\nexport function getTokenGeo() {\n  const newDateToken = new Date().getTime();\n  const timeExpires = newLs.get(md5('tokenTime')) ? parseInt(newLs.get(md5('tokenTime'))) : new Date().getTime();\n\n  if (newDateToken > timeExpires) {\n    localStorage.clear();\n    return null;\n  }\n\n  return newLs.get(md5('tokenGeo'));\n}\nexport function getProfileUser() {\n  const newDateToken = new Date().getTime();\n  const timeExpires = newLs.get(md5('tokenTime')) ? parseInt(newLs.get(md5('tokenTime'))) : new Date().getTime();\n\n  if (newDateToken > timeExpires) {\n    localStorage.clear();\n    return null;\n  }\n\n  return newLs.get(md5('profileUser'));\n}","map":{"version":3,"sources":["C:/Users/pc/Desktop/asira_core/src/components/index/token.js"],"names":["SecureLS","md5","newLs","encodingType","isCompression","encryptionSecret","setTokenAuth","token","set","setToken","expires","setTokenGeo","tokenGeo","setProfileUser","profileUser","getTokenAuth","get","getToken","newDateToken","Date","getTime","timeExpires","parseInt","localStorage","clear","getTokenGeo","getProfileUser"],"mappings":"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","sourcesContent":["import SecureLS from 'secure-ls';\r\nimport md5 from 'md5';\r\n\r\nconst newLs = new SecureLS({encodingType: 'aes', isCompression: true, encryptionSecret:'react-secret'}); \r\n\r\nexport function setTokenAuth(token) {\r\n    newLs.set(md5('tokenAuth'), token);\r\n}\r\n\r\nexport function setToken(token, expires) {\r\n    newLs.set(md5('token'), token);\r\n    newLs.set(md5('tokenTime'), expires);\r\n}\r\n\r\nexport function setTokenGeo(tokenGeo) {\r\n    newLs.set(md5('tokenGeo'), tokenGeo);\r\n}\r\n\r\nexport function setProfileUser(profileUser) {\r\n    newLs.set(md5('profileUser'), profileUser);\r\n}\r\n\r\nexport function getTokenAuth() {\r\n    return newLs.get(md5('tokenAuth'));\r\n}\r\n\r\nexport function getToken() {\r\n    const newDateToken = new Date().getTime();\r\n    const timeExpires = newLs.get(md5('tokenTime')) ? parseInt(newLs.get(md5('tokenTime'))) : new Date().getTime();\r\n\r\n    if(newDateToken > timeExpires) {\r\n        localStorage.clear();\r\n        return null\r\n    }\r\n    \r\n    return newLs.get(md5('token'));\r\n}\r\n\r\nexport function getTokenGeo() {\r\n    const newDateToken = new Date().getTime();\r\n    const timeExpires = newLs.get(md5('tokenTime')) ? parseInt(newLs.get(md5('tokenTime'))) : new Date().getTime();\r\n    \r\n    if(newDateToken > timeExpires) {\r\n        localStorage.clear();\r\n        return null\r\n    }\r\n\r\n    return newLs.get(md5('tokenGeo'));\r\n}\r\n\r\nexport function getProfileUser() {\r\n    const newDateToken = new Date().getTime();\r\n    const timeExpires = newLs.get(md5('tokenTime')) ? parseInt(newLs.get(md5('tokenTime'))) : new Date().getTime();\r\n    \r\n    if(newDateToken > timeExpires) {\r\n        localStorage.clear();\r\n        return null\r\n    }\r\n\r\n    return newLs.get(md5('profileUser'));\r\n}"]},"metadata":{},"sourceType":"module"}