{"ast":null,"code":"import axios from 'axios';\nimport { serverUrl } from '../url';\nimport { getToken } from '../index/token';\nimport { destructErrorMessage } from '../global/globalFunction';\nexport async function getAllRoleFunction(param, next) {\n  return new Promise(async resolve => {\n    const token = getToken();\n    const config = {\n      headers: {\n        'Authorization': \"Bearer \" + token\n      }\n    };\n    let filter = '';\n\n    for (const key in param) {\n      filter += `&${key}=${param[key]}`;\n    }\n\n    const urlNew = serverUrl + `admin/roles_all?orderby=updated_at&sort=desc${filter}`;\n    axios.get(urlNew, config).then(res => {\n      const listRole = res.data && res.data.data ? res.data.data : res.data;\n      param.dataRole = listRole;\n\n      if (next) {\n        resolve(next(param));\n      } else {\n        resolve(param);\n      }\n    }).catch(err => {\n      const error = err.response && err.response.data && destructErrorMessage(err.response.data) || err.toString();\n      param.error = error;\n      resolve(param);\n    });\n  });\n}\n;\nexport async function getRoleFunction(param, next) {\n  return new Promise(async resolve => {\n    const token = getToken();\n    const config = {\n      headers: {\n        'Authorization': \"Bearer \" + token\n      }\n    };\n    axios.get(serverUrl + `admin/roles/${param.roleId}`, config).then(res => {\n      const listRole = res.data;\n      param.dataRole = listRole;\n\n      if (next) {\n        resolve(next(param));\n      } else {\n        resolve(param);\n      }\n    }).catch(err => {\n      const error = err.response && err.response.data && destructErrorMessage(err.response.data) || err.toString();\n      param.error = error;\n      resolve(param);\n    });\n  });\n}\nexport async function getPermissionFunction(param, next) {\n  return new Promise(async resolve => {\n    const token = getToken();\n    const config = {\n      headers: {\n        'Authorization': \"Bearer \" + token\n      }\n    };\n    axios.get(serverUrl + `admin/permission?role_id=${param.roleId}`, config).then(res => {\n      const listPermission = res.data && res.data.data ? res.data.data : res.data;\n      param.dataPermission = listPermission;\n\n      if (next) {\n        resolve(next(param));\n      } else {\n        resolve(param);\n      }\n    }).catch(err => {\n      const error = err.response && err.response.data && destructErrorMessage(err.response.data) || err.toString();\n      param.error = error;\n      resolve(param);\n    });\n  });\n}\nexport async function patchRolePermissionFunction(param) {\n  return new Promise(async resolve => {\n    const token = getToken();\n    const config = {\n      headers: {\n        'Authorization': \"Bearer \" + token\n      }\n    };\n    axios.patch(serverUrl + `admin/roles/${param.roleId}`, param.dataRolePermission, config).then(res => {\n      resolve(res);\n    }).catch(err => {\n      const error = err.response && err.response.data && destructErrorMessage(err.response.data) || err.toString();\n      param.error = error;\n      resolve(param);\n    });\n  });\n}\nexport async function postRolePermissionFunction(param) {\n  return new Promise(async resolve => {\n    const token = getToken();\n    const config = {\n      headers: {\n        'Authorization': \"Bearer \" + token\n      }\n    };\n    axios.post(serverUrl + `admin/permission`, param.dataRolePermission, config).then(res => {\n      resolve(res);\n    }).catch(err => {\n      const error = err.response && err.response.data && destructErrorMessage(err.response.data) || err.toString();\n      param.error = error;\n      resolve(param);\n    });\n  });\n}","map":{"version":3,"sources":["C:/Users/pc/Desktop/asira_core/src/components/rolePermission/saga.js"],"names":["axios","serverUrl","getToken","destructErrorMessage","getAllRoleFunction","param","next","Promise","resolve","token","config","headers","filter","key","urlNew","get","then","res","listRole","data","dataRole","catch","err","error","response","toString","getRoleFunction","roleId","getPermissionFunction","listPermission","dataPermission","patchRolePermissionFunction","patch","dataRolePermission","postRolePermissionFunction","post"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { serverUrl } from '../url'\r\nimport { getToken } from '../index/token';\r\nimport { destructErrorMessage } from '../global/globalFunction';\r\n\r\nexport async function getAllRoleFunction(param, next){\r\n    return new Promise(async (resolve) => {\r\n        const token = getToken();\r\n       \r\n        const config = {\r\n            headers: {'Authorization': \"Bearer \" + token}\r\n        };\r\n\r\n        let filter = '';\r\n\r\n        for(const key in param) {\r\n            filter += `&${key}=${param[key]}`\r\n        }\r\n\r\n        const urlNew = serverUrl+`admin/roles_all?orderby=updated_at&sort=desc${filter}`\r\n\r\n        axios.get(urlNew,config).then((res)=>{\r\n            const listRole = res.data && res.data.data ? res.data.data : res.data\r\n            param.dataRole = listRole;\r\n\r\n            if(next) {\r\n                resolve(next(param));\r\n            } else {\r\n                resolve(param);\r\n            }\r\n        }).catch((err)=>{\r\n            const error = (err.response && err.response.data && destructErrorMessage(err.response.data)) || err.toString()\r\n            param.error = error;\r\n            resolve(param);\r\n        })\r\n    });\r\n};\r\n\r\nexport async function getRoleFunction(param, next) {\r\n    return new Promise(async (resolve) => {\r\n        const token = getToken()\r\n        const config = {\r\n            headers: {'Authorization': \"Bearer \" + token}\r\n        };\r\n\r\n        axios.get(serverUrl+`admin/roles/${param.roleId}`,config).then((res)=>{\r\n            const listRole = res.data;\r\n            param.dataRole = listRole;\r\n\r\n            if(next) {\r\n                resolve(next(param));\r\n            } else {\r\n                resolve(param);\r\n            }\r\n        }).catch((err)=>{\r\n            const error = (err.response && err.response.data && destructErrorMessage(err.response.data)) || err.toString()\r\n            param.error = error\r\n            resolve(param);\r\n        })\r\n    });\r\n}\r\n\r\nexport async function getPermissionFunction(param, next) {\r\n    return new Promise(async (resolve) => {\r\n        const token = getToken()\r\n        const config = {\r\n            headers: {'Authorization': \"Bearer \" + token}\r\n        };\r\n          \r\n        axios.get(serverUrl+`admin/permission?role_id=${param.roleId}`,config)\r\n        .then((res)=>{\r\n            const listPermission = res.data && res.data.data ? res.data.data : res.data;\r\n\r\n            param.dataPermission = listPermission;\r\n    \r\n            if(next) {\r\n                resolve(next(param));\r\n            } else {\r\n                resolve(param);\r\n            }\r\n    \r\n        }).catch((err)=>{\r\n            const error = (err.response && err.response.data && destructErrorMessage(err.response.data)) || err.toString()\r\n            param.error = error;\r\n            resolve(param);\r\n        })\r\n    });\r\n    \r\n}\r\n\r\nexport async function patchRolePermissionFunction(param) {\r\n    return new Promise(async (resolve) => {\r\n        const token = getToken();\r\n        const config = {\r\n            headers: {'Authorization': \"Bearer \" + token}\r\n        };\r\n\r\n        axios.patch(serverUrl+`admin/roles/${param.roleId}`,param.dataRolePermission,config).then((res)=>{\r\n            resolve(res)\r\n        }).catch((err)=>{\r\n            const error = (err.response && err.response.data && destructErrorMessage(err.response.data)) || err.toString()\r\n            param.error = error;\r\n            resolve(param);\r\n        })\r\n    })\r\n}\r\n\r\nexport async function postRolePermissionFunction(param) {\r\n    return new Promise(async (resolve) => {\r\n        const token = getToken(); \r\n        const config = {\r\n            headers: {'Authorization': \"Bearer \" + token}\r\n        };\r\n\r\n        axios.post(serverUrl+`admin/permission`,param.dataRolePermission,config).then((res)=>{\r\n            resolve(res)\r\n        }).catch((err)=>{\r\n            const error = (err.response && err.response.data && destructErrorMessage(err.response.data)) || err.toString()\r\n            param.error = error;\r\n            resolve(param);\r\n        })\r\n    })\r\n}"]},"metadata":{},"sourceType":"module"}