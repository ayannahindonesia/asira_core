{"ast":null,"code":"import { serverUrl } from './../url';\nimport axios from 'axios';\nimport { getToken } from '../index/token';\nimport { destructErrorMessage } from '../global/globalFunction';\nexport async function getAllBankListFunction(param, next) {\n  return new Promise(async resolve => {\n    const config = {\n      headers: {\n        'Authorization': \"Bearer \" + getToken()\n      }\n    };\n    let filter = '';\n\n    for (const key in param) {\n      filter += `&${key}=${param[key]}`;\n    }\n\n    axios.get(serverUrl + `admin/banks?orderby=id&sort=ASC${filter}`, config).then(res => {\n      param.mitraList = res.data.data;\n\n      if (next) {\n        resolve(next(param));\n      } else {\n        resolve(param);\n      }\n    }).catch(err => {\n      const error = err.response && err.response.data && destructErrorMessage(err.response.data) || err.toString();\n      param.error = error;\n      resolve(param);\n    });\n  });\n}\nexport async function getAllLoanDataFunction(param, next) {\n  return new Promise(async resolve => {\n    const config = {\n      headers: {\n        'Authorization': \"Bearer \" + getToken()\n      }\n    };\n    let filter = '';\n\n    for (const key in param) {\n      filter += `&${key}=${param[key]}`;\n    }\n\n    var newLink = `admin/reports/convenience_fee?${filter}`;\n    axios.get(serverUrl + newLink, config).then(res => {\n      param.config = res.config.url;\n      param.reportFee = res.data;\n\n      if (next) {\n        resolve(next(param));\n      } else {\n        resolve(param);\n      }\n    }).catch(err => {\n      const error = err.response && err.response.data && destructErrorMessage(err.response.data) || err.toString();\n      param.error = error;\n      resolve(param);\n    });\n  });\n}","map":{"version":3,"sources":["C:/Users/pc/Desktop/asira_core/src/components/report/saga.js"],"names":["serverUrl","axios","getToken","destructErrorMessage","getAllBankListFunction","param","next","Promise","resolve","config","headers","filter","key","get","then","res","mitraList","data","catch","err","error","response","toString","getAllLoanDataFunction","newLink","url","reportFee"],"mappings":"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","sourcesContent":["\r\nimport {serverUrl} from './../url'\r\nimport axios from 'axios'\r\nimport { getToken } from '../index/token';\r\nimport { destructErrorMessage } from '../global/globalFunction';\r\n\r\nexport async function getAllBankListFunction (param,next){\r\n    return new Promise(async (resolve)=>{\r\n        const config = {\r\n            headers: {'Authorization': \"Bearer \" + getToken()}\r\n        };\r\n\r\n        let filter = '';\r\n\r\n        for(const key in param) {\r\n            filter += `&${key}=${param[key]}`\r\n        }\r\n        \r\n        axios.get(serverUrl+`admin/banks?orderby=id&sort=ASC${filter}`,config)\r\n        .then((res)=>{\r\n          \r\n            param.mitraList = res.data.data\r\n            if(next){\r\n                resolve(next(param))\r\n            }else{\r\n                resolve(param)\r\n            }\r\n        })\r\n        .catch((err)=>{\r\n            \r\n            const error = (err.response && err.response.data && destructErrorMessage(err.response.data))|| err.toString() \r\n            param.error = error;\r\n            resolve(param);\r\n        })\r\n    })\r\n}\r\n\r\nexport async function getAllLoanDataFunction (param,next){\r\n    return new Promise(async (resolve)=>{\r\n        const config = {headers: {'Authorization': \"Bearer \" + getToken()}};\r\n        let filter = '';\r\n\r\n        for(const key in param) {\r\n            filter += `&${key}=${param[key]}`\r\n        }\r\n\r\n        var newLink =`admin/reports/convenience_fee?${filter}`\r\n\r\n        axios.get(serverUrl+newLink,config)\r\n        .then((res)=>{\r\n            \r\n            param.config = res.config.url\r\n            param.reportFee = res.data\r\n            if(next){\r\n                resolve(next(param))\r\n            }else{\r\n                resolve(param)\r\n            }\r\n          \r\n        })\r\n        .catch((err)=>{\r\n            const error = (err.response && err.response.data && destructErrorMessage(err.response.data))|| err.toString()\r\n            param.error = error;\r\n            resolve(param);\r\n        })\r\n    })\r\n\r\n}"]},"metadata":{},"sourceType":"module"}