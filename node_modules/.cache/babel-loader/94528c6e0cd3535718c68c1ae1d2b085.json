{"ast":null,"code":"import SecureLS from 'secure-ls';\nimport md5 from 'md5';\nconst profileUser = md5('profileUser');\nconst newLs = new SecureLS({\n  encodingType: 'aes',\n  isCompression: true,\n  encryptionSecret: 'react-secret'\n});\nexport function validateEmail(email) {\n  let flag = false;\n\n  if (email.match(/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i)) {\n    flag = true;\n  }\n\n  return flag;\n}\nexport function validatePhone(phone) {\n  let flag = false;\n  let phoneRegex = /^(^\\+62\\s?|^0)(\\d{3,4}){2}\\d{3,4}$/;\n\n  if (phone.match(phoneRegex)) {\n    flag = true;\n  }\n\n  return flag;\n}\nexport function checkPermission(stringPermission, stringPermissionSecond) {\n  let flag = false;\n  const listPermission = newLs.get(profileUser) ? JSON.parse(newLs.get(profileUser)) : [];\n\n  for (const key in listPermission) {\n    if (stringPermission && listPermission[key] && listPermission[key].toString().toLowerCase() === stringPermission.toString().toLowerCase()) {\n      flag = true;\n      break;\n    } else if (stringPermissionSecond && listPermission[key] && listPermission[key].toString().toLowerCase() === stringPermissionSecond.toString().toLowerCase()) {\n      flag = true;\n      break;\n    } else if (listPermission[key] && listPermission[key].toString().toLowerCase() === 'all') {\n      flag = true;\n      break;\n    }\n  }\n\n  return flag;\n}","map":{"version":3,"sources":["C:/Users/pc/Desktop/asira_core/src/components/global/globalFunction.js"],"names":["SecureLS","md5","profileUser","newLs","encodingType","isCompression","encryptionSecret","validateEmail","email","flag","match","validatePhone","phone","phoneRegex","checkPermission","stringPermission","stringPermissionSecond","listPermission","get","JSON","parse","key","toString","toLowerCase"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,GAAP,MAAgB,KAAhB;AAEA,MAAMC,WAAW,GAAGD,GAAG,CAAC,aAAD,CAAvB;AACA,MAAME,KAAK,GAAG,IAAIH,QAAJ,CAAa;AAACI,EAAAA,YAAY,EAAE,KAAf;AAAsBC,EAAAA,aAAa,EAAE,IAArC;AAA2CC,EAAAA,gBAAgB,EAAC;AAA5D,CAAb,CAAd;AAGA,OAAO,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AACjC,MAAIC,IAAI,GAAG,KAAX;;AAEA,MAAGD,KAAK,CAACE,KAAN,CAAY,sCAAZ,CAAH,EAAwD;AACtDD,IAAAA,IAAI,GAAG,IAAP;AACD;;AAED,SAAOA,IAAP;AACH;AAED,OAAO,SAAUE,aAAV,CAAwBC,KAAxB,EAA+B;AAClC,MAAIH,IAAI,GAAG,KAAX;AACA,MAAII,UAAU,GAAG,oCAAjB;;AAEA,MAAGD,KAAK,CAACF,KAAN,CAAYG,UAAZ,CAAH,EAA4B;AAC1BJ,IAAAA,IAAI,GAAG,IAAP;AACD;;AAED,SAAOA,IAAP;AACH;AAED,OAAO,SAASK,eAAT,CAAyBC,gBAAzB,EAA2CC,sBAA3C,EAAmE;AACxE,MAAIP,IAAI,GAAG,KAAX;AAEA,QAAMQ,cAAc,GAAGd,KAAK,CAACe,GAAN,CAAUhB,WAAV,IAAyBiB,IAAI,CAACC,KAAL,CAAWjB,KAAK,CAACe,GAAN,CAAUhB,WAAV,CAAX,CAAzB,GAA8D,EAArF;;AAEA,OAAI,MAAMmB,GAAV,IAAiBJ,cAAjB,EAAiC;AAC/B,QAAGF,gBAAgB,IAAIE,cAAc,CAACI,GAAD,CAAlC,IAA2CJ,cAAc,CAACI,GAAD,CAAd,CAAoBC,QAApB,GAA+BC,WAA/B,OAAiDR,gBAAgB,CAACO,QAAjB,GAA4BC,WAA5B,EAA/F,EAA0I;AACxId,MAAAA,IAAI,GAAG,IAAP;AACA;AACD,KAHD,MAGO,IAAGO,sBAAsB,IAAIC,cAAc,CAACI,GAAD,CAAxC,IAAiDJ,cAAc,CAACI,GAAD,CAAd,CAAoBC,QAApB,GAA+BC,WAA/B,OAAiDP,sBAAsB,CAACM,QAAvB,GAAkCC,WAAlC,EAArG,EAAsJ;AAC3Jd,MAAAA,IAAI,GAAG,IAAP;AACA;AACD,KAHM,MAGA,IAAGQ,cAAc,CAACI,GAAD,CAAd,IAAuBJ,cAAc,CAACI,GAAD,CAAd,CAAoBC,QAApB,GAA+BC,WAA/B,OAAiD,KAA3E,EAAkF;AACvFd,MAAAA,IAAI,GAAG,IAAP;AACA;AACD;AACF;;AAED,SAAOA,IAAP;AACD","sourcesContent":["import SecureLS from 'secure-ls';\r\nimport md5 from 'md5'\r\n\r\nconst profileUser = md5('profileUser')\r\nconst newLs = new SecureLS({encodingType: 'aes', isCompression: true, encryptionSecret:'react-secret'});    \r\n                \r\n\r\nexport function validateEmail(email) {\r\n    let flag = false;\r\n\r\n    if(email.match(/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i)) {\r\n      flag = true;\r\n    }\r\n\r\n    return flag;\r\n}\r\n\r\nexport function  validatePhone(phone) {\r\n    let flag = false;\r\n    let phoneRegex = /^(^\\+62\\s?|^0)(\\d{3,4}){2}\\d{3,4}$/;\r\n\r\n    if(phone.match(phoneRegex)) {\r\n      flag = true\r\n    }\r\n    \r\n    return flag;\r\n}\r\n\r\nexport function checkPermission(stringPermission, stringPermissionSecond) {\r\n  let flag = false;\r\n  \r\n  const listPermission = newLs.get(profileUser) ? JSON.parse(newLs.get(profileUser)) : [];\r\n\r\n  for(const key in listPermission) {\r\n    if(stringPermission && listPermission[key] && listPermission[key].toString().toLowerCase() === stringPermission.toString().toLowerCase()) {\r\n      flag = true;\r\n      break;\r\n    } else if(stringPermissionSecond && listPermission[key] && listPermission[key].toString().toLowerCase() === stringPermissionSecond.toString().toLowerCase()) {\r\n      flag = true;\r\n      break;\r\n    } else if(listPermission[key] && listPermission[key].toString().toLowerCase() === 'all') {\r\n      flag = true;\r\n      break;\r\n    }\r\n  }\r\n  \r\n  return flag;\r\n}"]},"metadata":{},"sourceType":"module"}